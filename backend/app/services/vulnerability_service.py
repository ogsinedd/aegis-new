from typing import List, Optional
from sqlalchemy.orm import Session
from app.models.models import Vulnerability, ScanHistory
from app.schemas.scan import VulnerabilityCreate, VulnerabilityResponse
from loguru import logger

class VulnerabilityService:
    def __init__(self, db: Session):
        self.db = db
    
    def create_vulnerability(self, vulnerability: VulnerabilityCreate) -> Vulnerability:
        """Создать запись об уязвимости"""
        db_vulnerability = Vulnerability(
            scan_id=vulnerability.scan_id,
            cve_id=vulnerability.cve_id,
            cvss=vulnerability.cvss,
            severity=vulnerability.severity,
            description=vulnerability.description,
            recommendation=vulnerability.recommendation,
            details=vulnerability.details
        )
        
        self.db.add(db_vulnerability)
        self.db.commit()
        self.db.refresh(db_vulnerability)
        return db_vulnerability
    
    def get_vulnerabilities(self, scan_id: Optional[str] = None) -> List[Vulnerability]:
        """Получить список уязвимостей для конкретного сканирования или все уязвимости"""
        query = self.db.query(Vulnerability)
        
        if scan_id:
            query = query.filter(Vulnerability.scan_id == scan_id)
            
        return query.all()
        
    def get_vulnerability(self, vulnerability_id: int) -> Optional[Vulnerability]:
        """Получить уязвимость по ID"""
        return self.db.query(Vulnerability).filter(Vulnerability.id == vulnerability_id).first()
        
    def delete_vulnerability(self, vulnerability_id: int) -> bool:
        """Удалить уязвимость"""
        vulnerability = self.get_vulnerability(vulnerability_id)
        if vulnerability:
            self.db.delete(vulnerability)
            self.db.commit()
            return True
        return False
        
    def get_vulnerabilities_stats(self, scan_id: Optional[str] = None):
        """Получить статистику по уязвимостям"""
        # Базовый запрос для получения всех уязвимостей
        query = self.db.query(Vulnerability)
        
        # Если указан scan_id, фильтруем по нему
        if scan_id:
            query = query.filter(Vulnerability.scan_id == scan_id)
            
        # Получаем все уязвимости
        vulnerabilities = query.all()
        
        # Если уязвимости не найдены, возвращаем пустую статистику
        if not vulnerabilities:
            return {
                "total": 0,
                "by_severity": {
                    "critical": 0,
                    "high": 0,
                    "medium": 0,
                    "low": 0,
                    "unknown": 0
                }
            }
            
        # Подсчитываем количество уязвимостей по степени их тяжести
        severity_counts = {
            "critical": 0,
            "high": 0,
            "medium": 0,
            "low": 0,
            "unknown": 0
        }
        
        for vuln in vulnerabilities:
            severity = vuln.severity.lower() if vuln.severity else "unknown"
            if severity in severity_counts:
                severity_counts[severity] += 1
            else:
                severity_counts["unknown"] += 1
                
        # Возвращаем статистику
        return {
            "total": len(vulnerabilities),
            "by_severity": severity_counts
        } 
